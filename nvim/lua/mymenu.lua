local M = {}

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ action –ø—Ä–æ–≥—Ä–∞–º–º—ã
function M.run_action(action_name)
    local command = "/home/sergey/work/opensource/db-workflow/main -table=" .. action_name
    local output = vim.fn.system(command)
    
    -- –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
    vim.cmd('tabnew')
    
    -- –ó–∞–ø–æ–ª–Ω—è–µ–º –±—É—Ñ–µ—Ä –≤—ã–≤–æ–¥–æ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã
    local lines = vim.split(output, '\n')
    vim.api.nvim_buf_set_lines(0, 0, -1, false, lines)
    
    -- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±—É—Ñ–µ—Ä
    vim.bo.buftype = 'nofile'
    vim.bo.bufhidden = 'hide'
    vim.bo.swapfile = false
    vim.bo.filetype = 'text'
    vim.api.nvim_buf_set_name(0, 'action://' .. action_name)
    
    -- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
    if action_name == "logs" then
        vim.bo.filetype = 'log'
    end
end

-- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω—é –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
function M.create_dynamic_menu()
    -- –ó–∞–ø—É—Å–∫–∞–µ–º menu.go —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
    local menu_output = vim.fn.system('/home/sergey/work/opensource/db-workflow/main -tables')
    local menu_lines = vim.split(menu_output, '\n')
    
    local qf_items = {}
    local actions_list = {}
    
    -- –°–æ–±–∏—Ä–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –∏ —Å–æ–∑–¥–∞–µ–º –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é
    for i, line in ipairs(menu_lines) do
        if line ~= '' then
            local action_name = line:match('^%s*(%S+)%s*$')
            if action_name then
                table.insert(actions_list, action_name)
                
                -- –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –º–µ–Ω—é
                -- local display_text = ""
                -- if action_name == "users" then
                --     display_text = "üë• –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                -- elseif action_name == "orders" then
                --     display_text = "üì¶ –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã"
                -- elseif action_name == "requests" then
                --     display_text = "üìù –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã"
                -- elseif action_name == "statistics" then
                --     display_text = "üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
                -- elseif action_name == "logs" then
                --     display_text = "üìã –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
                -- else
                --     display_text = "üîß " .. action_name
                -- end

				display_text = "Show " .. action_name
                
                table.insert(qf_items, {
                    filename = "menu://action",
                    lnum = i,
                    col = 1,
                    text = display_text
                })
            end
        end
    end
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º mapping –¥–µ–π—Å—Ç–≤–∏–π
    M.menu_actions = {}
    for i, action_name in ipairs(actions_list) do
        M.menu_actions[i] = function()
            M.run_action(action_name)
        end
    end
    
    -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤ quickfix
    if #qf_items > 0 then
        vim.fn.setqflist(qf_items, ' ')
        vim.cmd('copen')
    else
        vim.notify("–ú–µ–Ω—é –ø—É—Å—Ç–æ–µ –∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ menu –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è", vim.log.levels.WARN)
    end
end

-- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤ –º–µ–Ω—é
function M.handle_menu_select()
    local line_num = vim.fn.line('.')
    if M.menu_actions and M.menu_actions[line_num] then
        M.menu_actions[line_num]()
        vim.cmd('cclose') -- –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    else
        vim.cmd('cc') -- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    end
end

-- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ mappings –¥–ª—è quickfix
function M.setup_quickfix_mappings()
    vim.cmd([[
    augroup CustomQuickfixMenu
        autocmd!
        autocmd FileType qf nnoremap <buffer> <CR> :lua require('mymenu').handle_menu_select()<CR>
        autocmd FileType qf nnoremap <buffer> q :cclose<CR>
        autocmd FileType qf nnoremap <buffer> <Esc> :cclose<CR>
    augroup END
    ]])
end

-- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
M.setup_quickfix_mappings()

return M
